/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.vitaqresc.vistas;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mycompany.vitaqresc.controladores.RestManager;
import com.mycompany.vitaqresc.models.ListaCitasPaciente;
import com.mycompany.vitaqresc.models.ListaPacientes;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gebel
 */
public class tramiteCita extends javax.swing.JFrame {

    /**
     * Creates new form tramiteCita
     */
    public static int indicePaciente = 0;
    public ListaPacientes listaPaciente;
    static String idPrim;

    public tramiteCita() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Fecha de cita");

        jLabel2.setText("Motivo de cita");

        jLabel3.setText("Hora de cita (formato 24 horas)");

        jButton1.setText("Reservar cita");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre completo", "Edad", "Fecha de cita", "Hora de cita", "Motivo de la cita"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jDateChooser1.setDateFormatString("dd/MM/yyyy");

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jButton2.setText("Regresar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(91, 91, 91))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jButton1)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        indicePaciente = 0;
        idPrim = null;
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Pattern patronLetras = Pattern.compile("[0-2][0-9][:][0-5][0-9]");
        SimpleDateFormat sdfrmt = new SimpleDateFormat("dd/MM/yyyy");
        if (!(jDateChooser1.getDate() == null)
                && !(jTextField3.getText() == "" || jTextField3.getText() == " " || jTextField3.getText() == null)
                && !(jTextArea1.getText() == null || jTextArea1.getText() == "" || jTextArea1.getText() == " ")) {
            if (patronLetras.matcher(jTextField3.getText()).matches()) {
                SimpleDateFormat convertirJsonFecha = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
                String motivocita = jTextArea1.getText();
                String fechacita = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate());
                String horatxt = jTextField3.getText();
                try {
                    /* method chaining para no declarar mucha variable, se pasa a hora
                       formal el texto de la hora, y se convierte a texto esa hora
                       formal pero con el formato HH:mm:ss.SSS para, ser
                       concatenado con la fecha.*/
                    String horacita = new SimpleDateFormat("HH:mm:ss.SSS")
                            .format(new SimpleDateFormat("HH:mm").parse(horatxt));

                    /*otro method chaining, el string armado cumple con el formato
                      de la variable convertirJsonAFecha, se convierte a fecha esa concatenacion
                      de strings y como para formatear una fecha, se ocupa otra fecha, 
                      esa fecha parseada se vuelve a convertir a texto*/
                    String fechahoracita = convertirJsonFecha.format(convertirJsonFecha.parse(fechacita + "T" + horacita));
                    System.out.println(fechahoracita);
                    int registrarCitaStatusResponse = RestManager.getInstance().registrarNuevaCita(
                            fechahoracita,
                            motivocita,
                            listaPaciente.getListaPacientesJava().get(indicePaciente).getIdPrim()
                    );
                    if (registrarCitaStatusResponse == 200) {
                        JOptionPane op = new JOptionPane("Cita registrada correctamente", JOptionPane.PLAIN_MESSAGE);
                        getComponents(op, true);
                        op.setBackground(Color.green);
                        JDialog jd = op.createDialog(this, "");
                        jd.setVisible(true);
                    } else {
                        System.out.println("error al registrar cita");
                    }
                } catch (ParseException ex) {
                    System.out.println(ex.getMessage());
                    JOptionPane op3 = new JOptionPane("El formato de fecha es incorrecto, debe ser dd/MM/yyyy", JOptionPane.PLAIN_MESSAGE);
                    getComponents(op3);
                    op3.setBackground(Color.red);
                    JDialog jd2 = op3.createDialog(this, "");
                    jd2.setVisible(true);
                }
                cargarHistorialCitas(idPrim);
            } else {
                JOptionPane op3 = new JOptionPane("El campo hora de cita solo admite números en formato '00:00' (24 horas '01-23')", JOptionPane.PLAIN_MESSAGE);
                getComponents(op3);
                op3.setBackground(Color.red);
                JDialog jd2 = op3.createDialog(this, "");
                jd2.setVisible(true);
            }

        } else {
            JOptionPane op2 = new JOptionPane("Favor de rellenar todos los campos", JOptionPane.PLAIN_MESSAGE);
            getComponents(op2);
            op2.setBackground(Color.red);
            JDialog jd2 = op2.createDialog(this, "");
            jd2.setVisible(true);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private static void getComponents(Container c) {
        Component[] m = c.getComponents();
        for (int i = 0; i < m.length; i++) {
            if (m[i].getClass().getName() == "javax.swing.JPanel") {
                m[i].setBackground(Color.red);
            }
            if (c.getClass().isInstance(m[i])) {
                getComponents((Container) m[i]);
            }
        }
    }

    private void getComponents(Container c, boolean si) {
        Component[] m = c.getComponents();
        for (int i = 0; i < m.length; i++) {
            if (m[i].getClass().getName() == "javax.swing.JPanel") {
                m[i].setBackground(Color.green);
            }
            if (c.getClass().isInstance(m[i])) {
                getComponents((Container) m[i]);
            }
        }
    }

    private int calcularEdadActual(Date fechaNacimiento, Date fechaActual) {
        DateFormat formatter = new SimpleDateFormat("yyyyMMdd");
        int d1 = Integer.parseInt(formatter.format(fechaNacimiento));
        int d2 = Integer.parseInt(formatter.format(fechaActual));
        /*retornamos la diferencia entre edades*/
        return (d2 - d1) / 10000;
    }

    public void cargarHistorialCitas(String idPrim) {

        if (this.idPrim == null) {
            this.idPrim = idPrim;
        }
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            SimpleDateFormat convertirJsonFecha = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");

            String jsonHistorialCitasPaciente = RestManager.getInstance().obtenerHistorialCitasPaciente(idPrim);
            ListaCitasPaciente listaCitas = objectMapper.readValue(jsonHistorialCitasPaciente, ListaCitasPaciente.class);
            DefaultTableModel c1 = (DefaultTableModel) jTable1.getModel();
            c1.setRowCount(0);
            jTable1.setModel(c1);
            String nombreCompleto = listaPaciente.getListaPacientesJava().get(indicePaciente).getNombres() + listaPaciente.getListaPacientesJava().get(indicePaciente).getApellidos();

            int edad = calcularEdadActual(
                    convertirJsonFecha.parse(listaPaciente.getListaPacientesJava().get(indicePaciente).getFechaNac()),
                    Date.from(Instant.now())
            );

            for (int i = 0; i < listaCitas.getHistorialCitasMedicas().size(); i++) {
                Date fechaYHoraCitaEnGeneral = convertirJsonFecha.parse(listaCitas.getHistorialCitasMedicas().get(i).getFechahoracita());
                //    System.out.println(fechaYHoraCitaEnGeneral.toString());
                String soloLaFecha = new SimpleDateFormat("dd/MM/yyyy").format(fechaYHoraCitaEnGeneral);
                String soloLaHora = new SimpleDateFormat("HH:mm").format(fechaYHoraCitaEnGeneral);
                c1.addRow(new Object[]{
                    nombreCompleto,
                    edad,
                    soloLaFecha,
                    soloLaHora,
                    listaCitas.getHistorialCitasMedicas().get(i).getMotivocita()
                });
                jTable1.setModel(c1);
            }
        } catch (IOException ex) {
            Logger.getLogger(historialCitas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(historialCitas.class.getName()).log(Level.SEVERE, null, ex);
        }
        indicePaciente = 0;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tramiteCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tramiteCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tramiteCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tramiteCita.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tramiteCita().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
